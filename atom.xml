<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://floatgray.github.io/</id>
    <title>floatGray</title>
    <updated>2021-02-12T16:36:54.254Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://floatgray.github.io/"/>
    <link rel="self" href="https://floatgray.github.io/atom.xml"/>
    <subtitle>记录学习与思考</subtitle>
    <logo>https://floatgray.github.io/images/avatar.png</logo>
    <icon>https://floatgray.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, floatGray</rights>
    <entry>
        <title type="html"><![CDATA[够了，我无法再忍受这样的人]]></title>
        <id>https://floatgray.github.io/post/gou-liao-wo-wu-fa-zai-ren-shou-zhe-yang-de-ren/</id>
        <link href="https://floatgray.github.io/post/gou-liao-wo-wu-fa-zai-ren-shou-zhe-yang-de-ren/">
        </link>
        <updated>2021-02-12T16:26:31.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>说话靠网络梗,听歌靠综艺节目,发表意见靠复制粘贴，这样的人真的算活着吗？</p>
</blockquote>
<p>三年前,我刚刚踏入中文社交网站,彼时怀着一定要溺死在网上的心情,每时每刻都在享受别人的观点.目前,我是一名资深网民,见证了信息流推送方式的一步步发展,也看到了网络门槛下降带来的种种危机.</p>
<p>现在,仅存的大型中文社交网络也许正走在崩溃的边缘.推荐算法越来越&quot;喂猪式&quot;,你看过的信息总会分裂出一堆类似的信息,实质上建立起了信息茧房.最为致命的,是一群人,他们:</p>
<ul>
<li>以网络引战为乐,使用钓鱼/反串黑/春秋笔法等类似武器,狂飙的评论数是他们的春药</li>
<li>搞斗争,搞批斗,著名的&quot;田园女拳&quot;</li>
<li>盲目从众,复制黏贴,哪里都要刻上到此一游</li>
</ul>
<p>看到这类人,我已经眉头紧锁了,当我模仿这些人说话时:</p>
<ul>
<li>&quot;推荐算法?信息茧房?和你说的标题有毛关系?&quot;</li>
<li>&quot;为啥例子里面只谈女拳,作者一定是男性主义者,不搞斗争,姥子就是看不惯你这种屌癌&quot;</li>
<li>B站黏贴怪:&quot;一个赞我就...&quot;</li>
</ul>
<p>感觉怫然不悦,充斥如此氛围的社交已经超过正常人的阈值了.作为看客也只好感叹一句,他们都像发动战争似的,最终要对方死,崩溃,投降.</p>
<p>微博上的女拳,尤其令人作呕.微博仅仅是她们使用舆论的工具,抱团攻击,煽动话语,恶词相向是家常便饭.次次矫枉过正,不得不让人怀疑她们的动机,是利益驱使,还是单纯情感宣泄.</p>
<p>国内主流互联网环境总是出于各种各样的考虑,加上了审查要素,但在微博下,这个方式总会误伤正常的观点发表而放过仇恨言论,这也算是衰落的小原因吧.</p>
<p>中文互联网也已经陷入困境,各种各样的目标人群不同的社区,加剧了网络社会的撕裂,微博变成战场,虎扑豆瓣等等变成了各自的大本营.一些社会事件的爆发,一定要引起舆论的发酵,最终各自下场厮杀拼个你死我活,两败俱伤.</p>
<p>我对于中文互联网的社交环境的治理持悲观态度,这是个死局.只能冀求自身能准确分辨出上面这些人之后,不予理会,还自己一个还算清静的使用环境.</p>
<p>最后,怀念一下三年前的即刻,当时使用即刻一天平均能到6小时,以至于不得不选择卸载它来保护我学习时间.它可以自定义的信息流,使得每个话题都令人感兴趣,类RSS阅读,小而美的非熟人社交,基本看不到令人厌烦的言语.我还是喜欢自己寻找有趣的内容啊.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[总有更值得做的事情]]></title>
        <id>https://floatgray.github.io/post/zong-you-geng-zhi-de-zuo-de-shi-qing/</id>
        <link href="https://floatgray.github.io/post/zong-you-geng-zhi-de-zuo-de-shi-qing/">
        </link>
        <updated>2021-02-06T15:50:05.000Z</updated>
        <content type="html"><![CDATA[<p>当我们迫于学校的教学计划，被迫选一些看上去比较没用的课程时，总会听到一些充满善意的劝慰：“这些知识多学一些也没有什么不好，没准哪天就能用得到呢！”这种话乍听起来仿佛很有道理，但实际上却是不折不扣的谎言。</p>
<p>连高中教学都已经文理分家，作为一名大学生，我们更应当对自己的将来有一个最基本的规划。令人遗憾的是，学校教务部门经常异想天开地把一些八竿子打不着的课程推到我们面前，以为让机动学院的学生同时掌握心理学和化学实验，就能打造出所谓的复合型人才。我们之所以拒绝学习那些对自己不是特别有用的知识，是因为这些知识对我们的价值太低。</p>
<p>事务对我们都会有影响，其价值必须定量，而非定性地讨论。出去义务扫马路可以陶冶你的情操，还可以锻炼身体。坐在家里背单词背一天你可以学会数百个新单词，提升英语水平。按照上面提到的“善意的逻辑”，这两者各有好处，仿佛难以取舍。但是我想在实际操作中，不会有人认为前者对你的益处更大。</p>
<p>说道理大家都清楚，但是在实际生活中，我们却总能见到某些组织的头目派手下同学站在食堂门口发传单，以“锻炼大家的社会实践能力”。我们也能见到不少同学东一榔头西一棒槌地学了许多与自己职业规划毫无关系的课程，美其名曰“扩充知识面”。</p>
<p>在打着各种华丽口号的诱惑面前，我们要保持清醒，并且时刻告诫自己</p>
<p>总有更值得做的事。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[要怎样努力，才能成为很厉害的人]]></title>
        <id>https://floatgray.github.io/post/yao-zen-yang-nu-li-cai-neng-cheng-wei-hen-li-hai-de-ren/</id>
        <link href="https://floatgray.github.io/post/yao-zen-yang-nu-li-cai-neng-cheng-wei-hen-li-hai-de-ren/">
        </link>
        <updated>2021-02-05T14:08:34.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>20岁写给18岁的自己</p>
</blockquote>
<p>首先，少年，答应别人的承诺，就一定要兑现。<br>
我以前，和你一样，很想成为一个很厉害很厉害很厉害的人。喜欢看热血的东西，幻想自己是屠龙的勇士，登塔的先锋，我左手有剑，右手有光，没头没脑的燃烧自己，敌人的骑军来了，我说：“你们何人堪与之战，我的女人在等我。”</p>
<p>后来我现实了一点，我觉得我要成为那种说走就走，说日就日的男人，我留络腮胡，流浪在欧洲或者博茨瓦纳，我拍孩子，拍野兽，拍流浪的雏妓，今夜邂逅明朝溜。与Elon Musk拥抱，说“嘿，我觉得我必须第一个登上火星。”</p>
<p>再后来，我觉得我人生的梦想，是在城市中心买上一间顶层公寓，有一面落地的钢化玻璃，在灯火通明的夜晚，我就要端着酒站在巨大的窗前，听整个城市的呼吸，然后朋友叩门，带来了一打嫩模，玩一些成年人的游戏，直到睡死去。</p>
<p>现在，我发现龙并不存在，我不会骑马，不会和异性调情，宁愿忍受孤独也不会去开口，家住5楼，我能做的，就是把眼前的事儿做好，赚到足够的钱，这样我可以给我心爱的姑娘一个地球仪，然后用飞镖扎它，扎到哪儿，就去哪儿。</p>
<p>这样看来，虽然我的想法随着生殖器的发育，始终在变，但那个很厉害很厉害的人，一直离我很远。</p>
<p>我心中曾经执剑的少年，此刻也混迹在市井之间。血似乎凉了。</p>
<p>我也不是没有惶恐过，是不是我这一生，都不能左手持剑，右手环着哥们，说这里的嫩模随便你玩但是你他妈别从窗户上掉下去。</p>
<p>回头一看，我的朋友都是凡人，我真是逊得不行，业余生活就是推塔、跪、感叹人生无趣无聊无用。</p>
<p>我心想，我是不是这辈子都要做一个垃圾，直到我的坟墓上写好墓志铭，我甚至都想好了：我来，我见，我留不下什么。</p>
<p>最后我给了自己一个否定的答复，<strong>我不要</strong>。</p>
<p>我喜欢我的朋友们，喜欢我现在的生活，首先我希望你明白，没有厉害与垃圾，只有血的凉与热，有的人觉得生活就这样吧，算了，现在没什么不好；有的人觉得生活这样挺好，但是还能更好；这种只要剧情稍微热血一点就会热泪盈眶的傻逼，已经不多了，一刻也不能停留。所以现在，我和你一样，我仍然想成为一个很厉害很厉害很厉害的人，像我们这种剧情稍微热血一点就会热泪盈眶的傻逼，要好好珍惜自己。</p>
<p>很多人坐下来了，跟你说你不行，说你省点儿心吧，说你请静一静。汹涌的人群就把你淹没了，人群散去的时候，你也不见了，你那些承诺，谁也听不见，这个世界对于你，就再不可能有什么更有趣更漂亮的女朋友。</p>
<p>你就失约了，狗东西。</p>
<p>这么跟你说。<br>
虽然随着年龄的增长，我趋于现实，不能像你那样分分钟冲动的燃烧，然而我每时每刻都有想做的事，有想达成的目标。</p>
<p>不排除以后的某一年，我会握着Elon Musk的手，他说：“来吧，让我们一起送人上火星。”到时候，在火星上再刻下我经典的墓志铭。</p>
<p>小伙儿，成为很厉害很厉害的人，最重要的，就是要热血，永远也不要让你的血凉下去，你凉下去了，就再也不能找到一个更有趣更漂亮的女友，你就失约了，于是那天她踏梦而来，就成了一个彻头彻尾的笑话。当有一天你成为你讨厌的那种人，浑浑噩噩，你走在街上，看见那些更有趣更漂亮的女孩，你会不会想起多年以前，你说我答应你，在一个承诺就是永远的年纪。</p>
<p>读书，交友，美容，都不如你这一腔狗血，滚烫，灼人，你要燃上大半辈子，才对得起你现在说的这些话。</p>
<p>我听闻最美的故事，是公主死去了，屠龙的少年还在燃烧。<br>
火苗再小，你都要反复的点燃。<br>
所谓热血的少年，青涩的爱恋，死亡与梦之约。<br>
<strong>这么好的故事，<br>
你可别演砸了。</strong></p>
<p><strong>最后我给你点个人建议：</strong></p>
<p>1.读书，读到倦，网上有很多方法，但你从来沉不下心看。</p>
<p>2.学习，学到疼，网上有很多方法，但你从来沉不下心看。</p>
<p>3.开口说话，冷场也要说话，脸皮薄也要说话，挨打也要说话。</p>
<p>4.如果你现在不知道做什么，至少你还可以先从做一个牛逼的学生开始。</p>
<p>5.更漂亮更有趣的女孩，五年以后再找。</p>
<p>6.承诺是鞭子，不是兴奋剂。</p>
<p>7.年纪大了，也不要说什么心如死灰。</p>
<p>改变自己是非常，非常，非常痛苦的，我能看出来你一腔热血的优点，自然知道你孤僻懒散自以为是的缺点，方法很多，不过我不确定你吃不吃得了苦，我和你共勉吧。</p>
<p>在成为<strong>最厉害最厉害最厉害</strong>的道路上。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[寒假学习预先计划]]></title>
        <id>https://floatgray.github.io/post/han-jia-xue-xi-yu-xian-an-pai/</id>
        <link href="https://floatgray.github.io/post/han-jia-xue-xi-yu-xian-an-pai/">
        </link>
        <updated>2021-01-17T02:28:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="为什么在寒假学习">为什么在寒假学习</h1>
<p>寒假的优势不言而喻：有大块整段的时间。</p>
<h1 id="学什么">学什么</h1>
<p>算法与数据结构，刷算法题，考研数学，考研英语</p>
<h1 id="如何安排">如何安排</h1>
<p>算法使用ACWing的课程，数学刷李永乐复习全书，英语记单词。</p>
<h1 id="学习时间段">学习时间段</h1>
<p>2021年1月19日——2021年2月26日<br>
<strong>39天</strong><br>
936小时</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[内卷的社会，各阶层的众生相]]></title>
        <id>https://floatgray.github.io/post/nei-juan-de-she-hui-ge-jie-ceng-de-zhong-sheng-xiang/</id>
        <link href="https://floatgray.github.io/post/nei-juan-de-she-hui-ge-jie-ceng-de-zhong-sheng-xiang/">
        </link>
        <updated>2020-11-27T15:17:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="何为内卷">何为“内卷”</h1>
<p><a href="https://www.thepaper.cn/newsDetail_forward_9648585">来源</a><br>
<a href="https://baike.baidu.com/item/%E9%A1%B9%E9%A3%99/23318243?fr=aladdin">作者</a><br>
2020年，可能没有第二个人类学术语比“内卷”更加出圈了，它本来是人类学家解释为什么一个社会或组织既无突变式发展，也无渐进式的增长，只是在一个简单层次上自我重复的概念发明。现在则意味着“<strong>白热化的竞争</strong>”，人们在日常生活的方方面面拼尽全力，以使自己在社会上获取少量竞争优势，挤占他人的生存空间，同时造成精神内耗和浪费。人们可以在当代生活的方方面面识别出内卷，可以说是从幼儿园一路“卷”到职场、连婚恋也可以“卷到天上去”。</p>
<p>为什么叫内卷？是说你在耕作的时候，大家对每一个细节都越来越关注，可是到最后产出跟你投入是没有关系的，甚至是负增长。如果你要到一个荒野上去开垦荒地，粗放地耕种，其实你的产出和投入的比例反而更高。精耕细作这四个字，是对亚洲农业很好的概括。后来学者黄宗智研究长江三角洲的及农业经济的发展，他把内卷的概念引到了对中国的农业经济史的分析，他的分析跟Mark Elvins“高水平陷阱”的意思，基本上是相通的。 “高水平陷阱”是说，中国在很早就在农业技术、行政管理，还有社会组织、人力动员方面达到了很高的水平，但它达到高水平之后一直就没有突破。农业的生活和生产方式就没有变化。Mark Elvins的解释是指在17世纪以后，中国基本上开垦了所有能开垦的土地，土地没有增长，但是人口一直在增长。人口的增长靠什么来维持？主要就是靠精耕细作，靠这种非常内卷的方式。<br>
这个死胡同是自己循环的一个死胡同，跳不出来了，它是个很消耗精力的死循环。在中国语境下面，你为什么会走进这么一个高度耗能的死胡同和死循环的？当然是来自于这个<strong>群体压力</strong>，因为是别的母亲都在那里那么做，这是来自一个群体压力，所以这里就带着有一种有意的或者是无意识的竞争或者攀比在里面，这可能是一个背景和语境。<br>
如果说原来内卷指的是一个重复的，没有竞争的，不能摆脱农耕社会这么一个结构性格局，今天的内卷是一个<strong>陀螺式的死循环</strong>，我们要不断抽打自己，让自己就这么空转，每天不断地自己动员自己。所以它是一个高度动态的陷阱，所以非常耗能。在小农社会里面，它体力上很累，但是不会有这种在精神上的这种折磨的。<br>
传统上我们对祖先的崇拜非常重要，因为它是一个重复。所以他不肖子孙的“肖”，是说你不“像”，没有能力去重复你原来祖先的工作，你的重复能力是最重要的。而今天是完全相反的，我们养孩子的方式一定要跟我们父母养孩子的方式不一样。这也是现在中国家庭教育的一个特色，不断的教育孩子，你长大了千万不要跟你爸爸一样。所以它是另外一种陷阱，要不断的超越，是奥林匹克，要更高更快更强。我们的竞争不允许失败和退出。所谓内卷性不仅仅是说竞争激烈不激烈的问题，而是说白竞争，明明知道最后的收获也没有什么，大家还是要竞争。不知道除了竞争之外，还有别的什么方式值得去生活。如果你退出竞争的话，你有道德压力。**现在内卷的一个很重要的特征，就是没有退出的机制，不允许你退出。**刚才讲到那位同学要去麦当劳工作，面试官第一句话就是说你父母怎么想？你要往下走，要退出竞争，过自己的生活，你面对的道德压力是非常大的。现在对“三和青年”的各种讨论背后也是有一种焦虑，就觉得这些人怎么就这样退出竞争了。因为整个社会的稳定，整个社会的所谓发达都是靠这种白热化的竞争维系起来的。</p>
<blockquote>
<p>内卷背后：高度一体化的竞争</p>
</blockquote>
<p>项飙：我对牛津本科生了解很少。但是非常绩点化的，一切都工具化的、小心翼翼的取悦权威，然后把同学都看作是潜在的竞争对象的情况，这个现象应该不存在。<br>
首先，这种绩点性的竞争，或者叫内卷，在人类历史上是一个例外。在中国也就是这10年才发生这样的情况。在英国当然也会有群体压力，牛津本科生的群体压力是什么？ 是你在做一件事情的时候，大家期望你要说出来为什么觉得这个事情有趣？ 如果你说不清楚这个事情为什么有趣，就会对你的声望会打一点折扣的，大家就觉得你这个人不是非常authentic，好像你做这个事情是为了<strong>取悦别人</strong>，或者说是因为<strong>别人觉得好你才去做</strong>，大家会觉得你这样的人会比较无趣。所以你要做事情一定要有一个比较好的narrative。这是一个习惯，他们写报告或者研究申请，你也都看到那样的轨迹，比较强调他为什么觉得这个事情有趣。中国学生出来以后，在这方面有一点困难，他们的申请报告里就写说社会意义很重要。但是社会意义很重要的东西很多，再说这个社会意义重要的话题已经做过无数次了，能够做出什么新的东西？中国学生往往这方面讲不太清楚，到最后那就不接地气了，讲的都是重复别人讲过的这些主流话语。</p>
<h1 id="财富分布严重的两极分化">财富分布，严重的两极分化</h1>
<p><a href="http://economy.caixin.com/2020-06-15/101567552.html">统计局回应6亿人月收入1000元：有数据印证</a><br>
<a href="https://www.163.com/dy/article/FLG3UH8P0521AGAE.html">中国人的收入到底有多高</a><br>
<a href="https://www.sohu.com/a/303827373_100001551">银行年报透露高端客户资产信息：14万人拥有3万亿存款，人均2000万 </a></p>
<h1 id="教育的内卷">教育的内卷</h1>
<p><a href="https://www.sohu.com/a/419676894_105067">绩点为王：中国顶尖高校年轻人的囚徒困境</a><br>
<a href="https://www.thepaper.cn/newsDetail_forward_10004246">刘云杉谈“教育内卷”：教育解决不了社会结构问题</a></p>
<h1 id="白领的内卷">白领的内卷</h1>
<p><a href="https://www.huxiu.com/article/374050.html">拼多多的厕所上了热搜，996的大厂员工没有如厕自由</a><br>
<a href="https://finance.sina.com.cn/tech/2021-01-14/doc-ikftssan6024495.shtml">拼多多员工自杀背后：什么在逼迫年轻人至死方休？</a></p>
<h1 id="蓝领的内卷">蓝领的内卷</h1>
<p><a href="https://finance.sina.com.cn/chanjing/gsnews/2020-09-08/doc-iivhvpwy5554456.shtml">外卖骑手 困在系统里</a><br>
<a href="https://www.infzm.com/contents/192781">外卖骑手被迫加速的驱动之手：AI还是利益</a><br>
<a href="https://finance.sina.com.cn/tech/2021-01-16/doc-ikftssan7090696.shtml">自焚的饿了么骑手：工资被扣5000元 多次讨要未果而轻生</a></p>
<h1 id="底层众生相">底层众生相</h1>
<p><a href="https://www.sohu.com/a/401396658_788514">我发现了一群都市隐者，栖居在城市的皱褶里 </a><br>
<a href="https://www.sohu.com/a/430664293_665455/">杀马特、三和大神、提桶者，二代农民工的出路在哪里？</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正确地浪费剩下的时间]]></title>
        <id>https://floatgray.github.io/post/zheng-que-di-lang-fei-sheng-xia-de-shi-jian/</id>
        <link href="https://floatgray.github.io/post/zheng-que-di-lang-fei-sheng-xia-de-shi-jian/">
        </link>
        <updated>2020-11-10T15:57:57.000Z</updated>
        <content type="html"><![CDATA[<p>如果说，毕业文凭是一项增值服务，那么大学四年就是一笔投资。说到投资，请大家设想象下，如果你手上现在有五百万现金，你打算如何投资？也许你会拿这笔钱炒股炒房炒汇炒基金，或者是开公司开厂房倒买倒卖做生意。但我想，我们这样年纪的人，很少有人会认同把那笔钱换成金银珠宝，放到保险箱里存起来。当然了，看近年通货膨胀的架势，把钱存进银行吃到的利息估计还赶不上贬值的速度。</p>
<p>我们之所以不认同换金银保值的想法，是因为我们知道，拥有这笔财富不应意味着坐吃山空，它们应当蕴含更大的力量，带来更广阔的机遇，在我们的操纵中产生出更为丰盛的回报！</p>
<p>相比宝贵的青春，我们在上学期间所需要的学费和生活开销几乎可以忽略不计。我们真正投下的有价值的筹码，是时间。面对着足以改变你人生轨迹的黄金时间，你是否感到了它的沉重？你又是否想过要如何计划这笔巨额投资？</p>
<p>如果你是一名乖孩子，每天从早晨开始好好上课，好好做作业，好好预习、复习，直到熄灯时间好好睡觉，过着这种积极健康，平稳中庸的生活，但是缺乏有效自我支配的生活（如果按照学校的规划，你会发现你可以自由支配的业余时间少得可怜）。那么，你这样退守下去，无异于把自己的青春放在保险箱里让他随着时间而凋谢。我们必须牢记这样的黄金规则：</p>
<p>**平庸的生活方式是麻醉药。**他只会束缚你，让你没有作为，甚至没有出息地度过大学的四年。</p>
<p>无论你做的事情是否有意义——哪怕任何事情都不做，时间也会从我们的身边溜走。我们必须一日三省问自己，今天的时间是否过得有价值。</p>
<p>一般来说，一项任务的价值，取决于它在时间尺度上的作用效率。花同样的功夫，我们应该尽量多做那些对整个人生都产生正面影响的事情，少做对中期的未来产生影响的事情，不做那些只对近期产生影响的事情。当然，产生负面影响的事是最应该避免的。从这个意义上说，花适当的时间锻炼身体能让我们终身受益，值得做；但是即便只花同样时间，我们也不应该打游戏，因为那只能获得转瞬即逝的空虚的精神愉悦。</p>
<p>其实，何止是体育锻炼与打游戏。我们上课、学习、考试这些事情是否真的值得去做，也都必须经过理性而批判的思考才能做出正确的决定。</p>
<p>有不少同学是为了 GPA 而上课。这些同学的错误在于，首先他们没有意识到，有许多提升 GPA 的办法比上课更为有效。同时，这些同学更没有想过 GPA 本身是否是一件重要的事情。我们很遗憾地承认，由于舆论的导向， GPA 几乎成为了我们大学的一切。在短期，它绝对是重要的。除非你要保研或者转专业，其余的情况下 GPA 绝对不是最重要的因素。</p>
<p>如果把目光放得稍微长远些，哪怕只是毕业后一两年， GPA 就会贬得一文不值。我们是不是应该为了这一块“敲门砖”而折衷了我们的远期目标？</p>
<p>安排时间道理真的很浅显：成功人士往往会津津乐道于他们在校期间锻炼出的专业素养，但几乎没有成熟（甚至不需要成功）的人，喜欢炫耀自己当年高数考了年级第一。</p>
<p>在另外一些时候，我们会给“上课”找一个更加堂而皇之的理由：学习知识。关于大学课堂的教学质量以及课堂所关注的所谓“解题技巧”，我已经不想再作赘述。简而言之，上课中，我们获得有用知识的效率是如此之低，以至于任何一种有效的自习方式都会轻松地获得更大的回报。打比方说，一个学期的英语课，每周四节共计48小时。在课堂上，我们有一半时间要忍受台上同学支离破碎的英语。然而，花同样的时间，一个智力正常的同学完全可以熟练背诵2000个单词（这个数字是根据广大 GRE 考生的备考状况进行的保守估测）。这2000单词足够让你的英语水平整体上一个台阶。敢问，一个学期的英语课，你又能学到什么呢？最多不过是熟练背诵那本来就已经很寒碜的课文而已。当然，英语课只是例子，你会发现你身边几乎充满了更值得谴责的例子，其中不少比英语课更甚。这些事情经常会包括（但不限于）：</p>
<ul>
<li>
<p>学生会议。几乎所有的学生会议，无论是在大礼堂举办的全校大会，还是社团头目临时占用教室举行的小规模会议，都有一个共同点，那就是毫无效率可言。</p>
</li>
<li>
<p>毫无组织的学生活动。通常在无组织的集体活动中，等人、闲谈总要花半个小时的时间。甚至让人怀疑活动的主题就是等人和闲谈。</p>
</li>
<li>
<p>费时费力不讨好，但是碍于面子不好推脱的临时工作。学校很多老师或者学生领导，喜欢把人当壮丁使唤。但是你要时刻清醒，你的身份不是临时工。“帮忙救急”和“工作”这两个概念必须区别对待。</p>
</li>
</ul>
<p>我们应该对计划时间下的工作量有足够认识。小到一小时、一天，大到一个暑假、一个学期，或者是大学四年，制定切实可行的计划，并为不能完成计划自责是最基本的要求。所谓的牛人和大多数庸人的主要差别，一方面在于有没有时间可以利用；再一方面，就是时间的利用率。我们必须时刻保持一种紧迫感，以保证时间不被虚度。只要你能把在校期间的时间正确地加以利用。不需要超人的天分——甚至不需要特别努力，你都有望在你的专业领域里出类拔萃。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[悲壮的学习方式]]></title>
        <id>https://floatgray.github.io/post/bei-zhuang-de-xue-xi-fang-shi/</id>
        <link href="https://floatgray.github.io/post/bei-zhuang-de-xue-xi-fang-shi/">
        </link>
        <updated>2020-11-02T15:47:46.000Z</updated>
        <content type="html"><![CDATA[<p>古人刻苦学习的故事，直到现在还在我们的身边不断上演。据说每天在新、东上中下院和图书馆都有几千人在自习。学生趴在山一样高的习题集边上苦苦奋斗，绝对是我校作为国内一流大学的亮丽的风景线。挖空心思研究解题技巧的学生们，与同样挖空心思研究出题技巧的老师们，构成了一个完美的圆环。在二者日复一日的机械劳动中，我只看到纸张、电力，以及粮食不断被浪费，却看不到中华之崛起。</p>
<p>我无意全盘否定同学们吃苦耐劳的精神，但这份精神充其量只能称为悲壮。我们耗费了大量的时间和精力掌握的那些考点、技巧，在真正的知识殿堂里根本登不上大雅之堂。哪怕我们特征值求得再熟练，积分积得再复杂，中国的载人飞船也不会因此而顺利上天。</p>
<p>我手上一本1300页的数学手册，上面记录了人类文明从远古直到二十世纪后半叶的主要数学成果。而我校高等数学教材（上下册）所涵盖的内容，不超过其中的130页。一个真正有志于建造科学大厦的人，是不应抱着一块儿砖头精雕细琢的。</p>
<p>学习最需要的，不是悲壮的毅力，而是对无限未知的渴求。</p>
<p>最终来说，学习知识的目的是为后继的知识铺垫，以及培养创造性的思维。所谓有效率的学习，应当是以最高的效率获取知识，服务这两个目标。从现状来看，我们想要把什么都搞扎实的学习习惯，其效率是极端低下的，而在我们通过大量习题，最终扎实掌握的信息里，有效的“知识”却又是如此的少。</p>
<p>今天，你学了多少？</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyCharm教程]]></title>
        <id>https://floatgray.github.io/post/pycharm-jiao-cheng/</id>
        <link href="https://floatgray.github.io/post/pycharm-jiao-cheng/">
        </link>
        <updated>2020-06-28T14:45:48.000Z</updated>
        <content type="html"><![CDATA[<p>PyCharm 是一种 Python IDE，可以帮助程序员节约时间，提高生产效率。</p>
<p>本文将介绍：</p>
<ul>
<li>PyCharm 安装</li>
<li>在 PyCharm 中写代码</li>
<li>在 PyCharm 中运行代码</li>
<li>在 PyCharm 中进行代码 debug 和测试</li>
<li>在 PyCharm 中编辑已有项目</li>
<li>在 PyCharm 中搜索和导航</li>
<li>在 PyCharm 中使用版本控制</li>
<li>在 PyCharm 中使用插件和外部工具</li>
<li>使用 PyCharm Professional 功能，如 Django 支持和科学模式</li>
</ul>
<h1 id="pycharm-安装">PyCharm 安装</h1>
<p>本文将使用 PyCharm Community Edition 2019.1 版本，该版本免费且可在所有主流平台上使用。只有最后一部分「PyCharm Professional 功能」使用的是 PyCharm Professional Edition 2019.1 版本。</p>
<p>推荐使用 JetBrains Toolbox App 安装 PyCharm。使用该 App，你可以安装不同的 JetBrains 产品或者同一产品的不同版本，并在必要的情况下更新、回滚和轻松删除任意工具。你还可以在恰当的 IDE 及版本中快速打开任意项目。</p>
<p>Toolbox App 安装指南，参见 JetBrains 官方文档：https://www.jetbrains.com/help/pycharm/installation-guide.html#toolbox。</p>
<p>该 App 会根据你的操作系统提供合适的安装说明。如果它无法无法准确识别系统，你可以在右上角的下拉列表中找到合适的系统。</p>
<p>安装成功后，启动该 app 并接受用户协议。在 Tools 选项下，你可以看到一个可用产品列表。从中找到 PyCharm Community，并点击 Install。</p>
<p>好啦，现在你的机器上已经安装 PyCharm 了。如果不想使用 Toolbox app，你可以单独安装 PyCharm。</p>
<p>启动 PyCharm，你将看到导入设置弹窗。PyCharm 会自动检测出这是首次安装，并为你选择「Do not import settings」选项。点击 OK，之后 PyCharm 会让你选择键盘映射（keymap scheme）。保留默认设置，点击右下角的「Next: UI Themes」：</p>
<p>PyCharm 将询问选择深色模式 Darcula 还是浅色模式。你可以选择自己喜欢的模式，并点击「Next: Launcher Script」：</p>
<p>在下一个页面上，直接保留默认设置，并点击「Next: Featured plugins」，这时 PyCharm 将展示可用插件列表。点击「Start using PyCharm」，现在你可以写代码了！</p>
<h1 id="在-pycharm-中写代码">在 PyCharm 中写代码</h1>
<p>在 PyCharm 中，你可以在「项目」中执行任意操作。因此，首先你需要创建一个项目。</p>
<p>安装和打开 PyCharm 后，你会看到欢迎页面。点击「Create New Project」，出现「New Project」弹窗：</p>
<p>指定项目位置，打开 Project Interpreter 列表，选择创建新的项目解释器或者使用已有的解释器。选择「New environment using」，打开其右方的下拉列表，选择 Virtualenv、Pipenv 或 Conda。这些工具可以为不同项目单独创建 Python 环境，从而分别保存不同项目所需的依赖项。</p>
<p>你可以选择其中任意一个。选择后，指定环境位置，从 Python 解释器列表中选择要安装在系统中的 base interpreter。通常，保持默认设置即可。下面有两个可选框：在新环境中继承全局包环境、令当前环境可以用其它所有项目，两个都不要选。</p>
<p>点击右下角的「Create」，创建新项目：</p>
<p>屏幕上出现「Tip of the Day」弹窗，在每次启动时 PyCharm 通过该弹窗提供 trick。关掉该弹窗。</p>
<p>现在我们可以开始新的 Python 程序了。如果你使用的是 Mac 系统，使用 Cmd+N 键；如果你使用的是 Windows 或 Linux 系统，使用 Alt+Ins 键。然后选择 Python File。你也可以在菜单中选择 File → New。将新文件命名为 guess_game.py 并点击 OK。你将看到如下 PyCharm 窗口：</p>
<p>至于测试代码，我们来快速写一个简单的猜谜游戏，即程序选择一个数字让用户来猜，在每一次猜测时，程序将告诉用户他猜的数字比神秘数字大还是小，用户猜中数字时游戏结束。以下是该游戏的代码：</p>
<pre><code class="language-python">import random
num = int(random.randint(1,100))   #产生一个1到100的随机整数
for i in (1,5):
    i = int(input('请输入你猜的数字：'))  # i为你猜到数赋值到的变量
    if i == num :
        print('恭喜你，猜对了！')
        break
    elif i &lt; num :
        print('太小了')
    elif i &gt; num :
        print('太大了')
print('很遗憾，你没有猜对')
</code></pre>
<p>直接键入上述代码，而不是复制粘贴，PyCharm 提供 Intelligent Coding Assistance 功能，可以执行代码补全、代码检查、错误高亮显示和快速修复建议。比如键入 main 并点击 tab 键，PyCharm 会自动补全整个 main 从句。</p>
<p>此外，如果你在条件句前忘记键入 if，在该句子最后增添.if 并点击 Tab 键，PyCharm 将修复该 if 条件句。该用法同样适用于 True.while。这即是 PyCharm 的 Postfix Completion 功能，它可以帮助用户减少退格键使用次数。</p>
<h1 id="在-pycharm-中运行代码">在 PyCharm 中运行代码</h1>
<p>现在你已经编码完成该游戏，可以运行了。</p>
<p>该游戏程序有三种运行方式：</p>
<p>1.在 Mac 系统中使用快捷键 Ctrl+Shift+R，在 Windows 或 Linux 系统中，使用快捷键 Ctrl+Shift+F10。</p>
<p>2.右键单击背景，从菜单中选择「Run 『guess_game』」。</p>
<p>3.由于该程序具备__main__ 从句，你可以点击__main__ 从句左侧的绿色小箭头，选择「Run 『guess_game』」。</p>
<p>使用以上任一方式运行该程序，窗口底部会出现终端面板（Terminal pane），显示你的代码输出结果：</p>
<p>你可以玩一下这个游戏，看看自己能否猜中数字。（专业建议：从 50 开始猜。）</p>
<h1 id="在-pycharm-中进行代码-debug">在 PyCharm 中进行代码 debug</h1>
<p>找到神秘数字了吗？如果找到了，你可能会看到一些奇怪的东西：程序没有打印出祝贺信息和显示退出按钮，而是重新开始了。这就是 bug 所在。要想发现程序重新开始的原因，你需要 debug。</p>
<p>首先，点击第 8 行代码左侧的空白区域，设置断点：</p>
<p>断点即程序运行到这一行时会自动停止，你可以探索断点处之后的代码有什么错误。接下来，从以下三种方式中选择一种开始 debug：</p>
<p>1.在 Mac 系统中使用 Ctrl+Shift+D 键，在 Windows 或 Linux 系统中使用 Shift+Alt+F9 键。</p>
<p>2.右键单击背景，选择「Debug 『guess_game』」。</p>
<p>3.点击__main__从句左侧的绿色小箭头，选择「Debug 『guess_game』」。</p>
<p>之后，你将看到底部出现 Debug 窗口：</p>
<p>按照下列步骤执行程序 debug：</p>
<ol>
<li>
<p>注意当前行被蓝色高亮显示。</p>
</li>
<li>
<p>Debug 窗口显示 random_int 及其值。记录该数字。（上图中该数字为 85。）</p>
</li>
<li>
<p>点击 F8 执行当前代码行，并执行到下一行代码。如有必要，你也可以使用 F7 跳转到当前行内的函数。随着你继续执行语句，变量的变化将自动呈现在 Debugger 窗口。</p>
</li>
<li>
<p>注意 Debugger 标签右侧有一个 Console 标签。Console 标签和 Debugger 标签相互独立。你可以在 Console 中与程序进行交互，在 Debugger 中执行 debug 动作。</p>
</li>
<li>
<p>转向 Console 标签，进入猜测过程。</p>
</li>
<li>
<p>键入左侧 Debugger 标签中显示的数字，点击 Enter 键。</p>
</li>
<li>
<p>转回 Debugger 标签。</p>
</li>
<li>
<p>再次点击 F8，计算 if 语句。注意现在你在第 14 行。为什么不是第 11 行呢？因为第 10 行的 if 语句被计算为 False。那么为什么当你键入数字后它算出来为 False 了呢？</p>
</li>
<li>
<p>仔细看第 10 行，注意我们在对比 user_guess 和一个错误的项。我们应该对比用户猜测的数字和 random_int，但此处我们对比的是 randint（从 random 包导入的函数）。</p>
</li>
<li>
<p>将 randint 更改为 random_int，按照同样的步骤重新开始 debug。你会发现，这一次到达的是第 11 行，第 10 行算出来为 True：</p>
</li>
</ol>
<p>恭喜你，bug 被修复了！</p>
<h1 id="在-pycharm-中进行代码测试">在 PyCharm 中进行代码测试</h1>
<p>不经单元测试的应用都不可靠。PyCharm 可以帮助你快速舒适地写单元测试并运行。默认情况下，unittest 被用作测试运行器，而 PyCharm 还支持其他测试框架，如 pytest、nose、doctest、tox 和 trial。例如，你可以按照以下步骤为项目选择 pytest 测试运行器：</p>
<ol>
<li>
<p>打开 Settings/Preferences → Tools → Python Integrated Tools 设置对话框。</p>
</li>
<li>
<p>在默认测试运行器字段中选择 pytest。</p>
</li>
<li>
<p>点击 OK 保存该设置。</p>
</li>
</ol>
<p>本教程的示例将使用默认测试运行器 unittest。</p>
<p>在同一个项目中，创建文件 calculator.py，并将以下 Calculator 类放入该文件：</p>
<p>PyCharm 使得为已有代码创建测试变得轻而易举。打开 calculator.py 文件，执行以下步骤中的任意一个：</p>
<p>在 Mac 系统中使用 Shift+Cmd+T 键，在 Windows 或 Linux 系统中使用 Ctrl+Shift+T。<br>
右键单击该类的背景，选择「Go To and Test」。<br>
在主菜单中吗，选择 Navigate → Test。<br>
选择「Create New Test…」</p>
<p>Target directory、Test file name 和 Test class name 这三项均保留默认设置。好了！PyCharm 自动创建文件 test_calculator.py，并在其中创建了以下 stub test：</p>
<pre><code class="language-python">class Calculator:
    def add(self, a, b):
        return a + b

    def multiply(self, a, b):
        return a * b 
</code></pre>
<p>使用以下方法中的任意一个运行测试：</p>
<p>在 Mac 系统中使用 Ctrl+R 键，在 Windows 或 Linux 系统中使用 Shift+F10 键。<br>
右键单击背景，选择「Run 『Unittests for test_calculator.py』」。<br>
点击测试类名称左侧的绿色小箭头，选择「Run 『Unittests for test_calculator.py』」。<br>
你将看到底部出现测试窗口，所有测试均失败：</p>
<p>注意，左侧是测试结果的层次结构，右侧是终端的输出。现在，将代码更改成以下代码，实现 test_add：</p>
<pre><code class="language-python">from unittest import TestCase

from calculator import Calculateo

class TestCalculator (TestCase)
    def test_add(self):
        self.calculator = Calculator()
        self.assertEqual(self.calculator.add(3, 4), 7)

    def test_multiply(self):
        sleep(0.1)
        self.fail()
</code></pre>
<p>重新运行测试，你会看到一个测试通过了，另一个则失败。按照如下操作探索不同选项，来展示已通过测试和被忽略测试，按照字母顺序对测试进行排序，以及按照时长对测试进行排序：</p>
<p>注意，上图中的 sleep(0.1) 方法的作用是使其中一个测试变慢，以便按时长对测试进行排序。</p>
<h1 id="在-pycharm-中编辑已有项目">在 PyCharm 中编辑已有项目</h1>
<p>单文件项目非常适合作为示例，但你通常需要处理较大的项目。这部分将介绍如何使用 PyCharm 处理较大项目。</p>
<p>为了探索 PyCharm 以项目为中心的特征，你将使用 Alcazar web 框架（该框架用于学习目的）。在本地复制该 repo（地址：https://realpython.com/optins/view/alcazar-web-framework/）。</p>
<p>当你在本地已有项目时，使用以下方法中的任意一个在 PyCharm 中打开项目：</p>
<p>在主菜单中点击 File → Open。</p>
<p>在欢迎页面点击 Open。</p>
<p>之后，在计算机中找到包含该项目的文件夹，并打开。</p>
<p>如果该项目包含虚拟环境，PyCharm 将自动使用该虚拟环境，并将它作为项目解释器。</p>
<p>如果你需要配置不同的虚拟环境 virtualenv，在 Mac 上打开 Preferences，或在 Windows 或 Linux 系统中使用 Ctrl+Alt+S 打开 Settings，找到 Project: ProjectName。打开下拉列表，选择 Project Interpreter：</p>
<p>从下拉列表中选择 virtualenv。如果没有要选择的项，则点击下拉列表右方的设置按钮选择 Add…。其余步骤和创建新项目的步骤相同。</p>
<h1 id="在-pycharm-中搜索和导航">在 PyCharm 中搜索和导航</h1>
<p>在大项目中，我们很难记住每个事物的位置，因此快速导航和搜索非常重要。PyCharm 可以提供这些功能。接下来，我们使用上一节中打开的项目，实践以下快捷键：</p>
<p>在当前文件中搜索代码段：在 Mac 系统中使用 Cmd+F 键，在 Windows 或 Linux 系统中使用 Ctrl+F 键。<br>
在整个项目中搜索代码段：在 Mac 系统中使用 Cmd+Shift+F 键，在 Windows 或 Linux 系统中使用 Ctrl+Shift+F 键。<br>
搜索类：在 Mac 系统中使用 Cmd+O 键，在 Windows 或 Linux 系统中使用 Ctrl+N 键。<br>
搜索文件：在 Mac 系统中使用 Cmd+Shift+O 键，在 Windows 或 Linux 系统中使用 Ctrl+Shift+N 键。<br>
如果你不知道要搜索的是文件、类还是代码段，则搜索全部：按两次 Shift 键。<br>
导航可使用以下快捷键：</p>
<p>前往变量的声明：在 Mac 系统中使用 Cmd 键，在 Windows 或 Linux 系统中使用 Ctrl 键，然后单击变量。<br>
寻找类、方法或文件的用法：使用 Alt+F7 键。<br>
查看近期更改：使用 Shift+Alt+C 键，或者在主菜单中点击 View → Recent Changes。<br>
查看近期文件：在 Mac 系统中使用 Cmd+E 键，在 Windows 或 Linux 系统中使用 Ctrl+E 键，或者在主菜单中点击 View → Recent Files。<br>
多次跳转后在导航历史中前进和后退：在 Mac 系统中使用 Cmd+[ / ] 键，在 Windows 或 Linux 系统中使用 Ctrl+Alt+Left / Ctrl+Alt+Right 键。<br>
更多细节，参见<a href="https://www.jetbrains.com/help/pycharm/tutorial-exploring-navigation-and-search.html">官方文档</a>。</p>
<h1 id="pycharm-中的版本控制">PyCharm 中的版本控制</h1>
<p>版本控制系统（如 Git 和 Mercurial）是现代软件开发世界中最重要的工具之一。因此，IDE 必须支持版本控制。PyCharm 在这方面做得很好，它集成了大量流行的版本控制系统，如 Git（和 <a href="https://github.com/">Github </a>）、Mercurial、Perforce 和 Subversion。</p>
<p>注：以下示例中使用的版本控制系统为 Git。</p>
<h2 id="配置版本控制系统vcs">配置版本控制系统（VCS）</h2>
<p>要想实现 VCS 集成，你需要在顶部菜单点击 VCS → VCS Operations Popup…，或者在 Mac 系统中使用 Ctrl+V 键，在 Windows 或 Linux 系统中使用 Alt+` 键。选择 Enable Version Control Integration…</p>
<p>从下拉列表中选择 Git，点击 OK，这样你就为项目设置好了 VCS。（注意，如果你打开的已有项目已经具备版本控制系统，PyCharm 将会发现并自动使用该版本控制系统。）</p>
<p>这时如果你前往 VCS Operations Popup…，你会发现一个不同的弹窗，它具备选项 git add、git stash、git branch、git commit、git push 等等：</p>
<p>如果你找不到所需要的选项，你可以在顶部菜单中点击 VCS，选择 Git，在这里你可以创建和查看 pull request。</p>
<h2 id="提交和冲突处理">提交和冲突处理</h2>
<p>这是 PyCharm 中 VCS 集成的两大特征，我个人经常使用并且非常喜欢。假如你完成了工作，打算提交，前往 VCS → VCS Operations Popup… → Commit…，或者在 Mac 系统中使用 Cmd+K 键，在 Windows 或 Linux 系统中使用 Ctrl+K 键。</p>
<p>在该窗口中，你可以：</p>
<ul>
<li>选择要提交的文件</li>
<li>写下提交信息</li>
<li>在提交前执行各项检查</li>
<li>查看更改</li>
<li>点击右下角 Commit 按钮旁边的箭头，选择 Commit and Push…，从而一次性完成提交和 push。<br>
是不是感觉很神奇很迅速？特别是如果你以前经常通过命令行手动执行这些任务时。</li>
</ul>
<p>团队合作中会出现合并冲突（merge conflict）。当一个人对你正在处理的文件提交更改时，你们二人更改了同一行导致更改重叠，这时 VCS 无法决定选择你的更改还是队友的更改。那么你可以使用以下箭头和符号来解决这个问题：</p>
<p>看起来很奇怪，我们很难分辨应该删除哪些更改、保留哪些更改。不要怕，PyCharm 来了！它可以用更好、更简洁的方法解决冲突。在顶部菜单中前往 VCS，选择 Git，然后选择 Resolve conflicts…。选择存在冲突的文件，点击 Merge，</p>
<p>在左侧列中，你可以查看自己做的更改。在右侧列中，可以查看队友做的更改。而中间列则显示结果。存在冲突的代码行被高亮显示，你可以在它们旁边看到 X 和 &gt;&gt;/&lt;&lt;。点击箭头表示接受更改，点击 X 则表示拒绝更改。解决所有冲突后，点击 Apply 按钮：</p>
<p>在上图中，对于第一个冲突行，作者选择拒绝自己的更改，接受队友的更改。而在第二个冲突行中，作者接受了自己的更改，拒绝了队友的更改。</p>
<p>使用 PyCharm 中的 VCS 集成还可以执行很多操作。详情参见 <a href="https://www.jetbrains.com/help/pycharm/version-control-integration.html">官方文档</a>。</p>
<h1 id="在-pycharm-中使用插件和外部工具">在 PyCharm 中使用插件和外部工具</h1>
<p>在 PyCharm 中你可以找到开发所需的几乎所有功能。如果没找到，那么很可能存在一个插件，向 PyCharm 提供你需要的功能。例如，它们可以：</p>
<p>添加多语言和多框架支持<br>
使用快捷键提示（shortcut hint）、文件监视器（file watcher）等提升你的生产效率<br>
利用代码练习，帮助你学习新的编程语言<br>
例如，IdeaVim 插件向 PyCharm 添加 Vim 模拟。如果你喜欢 Vim，这个插件可以实现不错的结合。</p>
<p>Material Theme UI 插件可将 PyCharm 的外观改变为 Material Design 的外观：</p>
<p>Vue.js 插件使 PyCharm 支持 Vue.js 项目。Markdown 插件使得在 IDE 内可以编辑 Markdown 文件，并实时预览渲染后的 HTML。</p>
<p>在 Mac 系统上点击 Preferences → Plugins，在 Windows 或 Linux 系统中点击 Settings → Plugins，你可以在 Marketplace 标签下找到和安装所有可用插件：</p>
<p>如果仍然没找到所需插件，你甚至可以自己开发一个。</p>
<p>如果你找不到合适的插件，又不想自己开发，因为 PyPI 上有可用的包，你可以将这个包作为外部工具添加到 PyCharm。以代码分析器 Flake8 为例。</p>
<p>首先，在所选 Terminal app 中键入 pip install flake8，从而在虚拟环境中安装 Flake8。或者也可以使用 PyCharm 集成的 Terminal：</p>
<p>在 Mac 系统上点击 Preferences → Tools，在 Windows 或 Linux 系统中点击 Settings → Tools，选择 External Tools。然后点击底部 (1) 处的 + 按钮。在弹出的窗口中，输入细节并在两个窗口中点击 OK</p>
<p>Program (2) 指 Flake8，你可以在虚拟环境文件夹（bin）中找到它。Arguments (3) 表示你想用 Flake8 分析的文件。Working directory 表示项目目录。</p>
<p>你可以把这里所有项的绝对路径写死，但这就意味着你无法在其他项目中使用该外部工具，只能在一个项目中针对一个文件使用该工具。</p>
<p>因此你需要使用 Macros。它是<code>$name$</code>格式的变量，根据语境而变化。例如，当你编辑 first.py 时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>l</mi><mi>e</mi><mi>N</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">FileName</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span></span></span></span> 为 first.py，当你编辑 second.py 时，<code>$FileName$</code>为 second.py。你可以查看它们的列表，点击 Insert Macro… 按钮将其中一个插入。此处你使用了 macros，它们的值会根据你目前处理的项目而改变，Flake8 将继续准确执行其工作。</p>
<p>要想使用它，你需要创建文件 example.py，并在其中写入以下代码：</p>
<pre><code class="language-python">CONSTANT_VAR = 1

def add（a, b):
    c = &quot;hello&quot;
    return a + b
</code></pre>
<p>上述代码故意破坏了 Flake8 的一些规则。右键单击文件背景，选择 External Tools → Flake8。Flake8 分析结果将出现在窗口底部：</p>
<p>为了使效果更好，你可以为其添加快捷键。在 Mac 系统中选择 Preferences，在 Windows 或 Linux 系统中选择 Settings。然后，点击 Keymap → External Tools → External Tools。双击 Flake8，选择 Add Keyboard Shortcut，出现以下窗口：</p>
<p>上图中，快捷键是 Ctrl+Alt+A（本教程使用该快捷键）。你可以在文本框中添加喜欢的快捷键，然后在两个窗口中点击 OK。然后，你就可以用该快捷键，在 Flake8 的帮助下分析目前在处理的文件了。</p>
<h1 id="pycharm-professional-功能">PyCharm Professional 功能</h1>
<p>PyCharm Professional 是 PyCharm 的付费版本，具备更多开箱即用的功能和集成。这部分将概览其主要功能，以及官方文档链接（其中详细介绍了每一项功能）。记住，以下功能在 PyCharm Community 版本中均不可用。</p>
<h2 id="django-支持">Django 支持</h2>
<p>Django 是最流行和最受喜爱的 Python web 框架，PyCharm 对 Django 提供广泛的支持。要确保对 Django 的支持，需要执行以下步骤：</p>
<ol>
<li>
<p>在 Mac 系统中打开 Preferences，在 Windows 或 Linux 系统中打开 Settings。</p>
</li>
<li>
<p>选择 Languages and Frameworks。</p>
</li>
<li>
<p>选择 Django。</p>
</li>
<li>
<p>检查复选框 Enable Django support。</p>
</li>
<li>
<p>应用更改。</p>
</li>
</ol>
<p>现在确保了对 Django 的支持，你在 PyCharm 中的 Django 开发之旅将轻松很多。具体而言在创建项目时，你会得到一个专用的 Django 项目类型。这表示，当你选择该类型时，你将拥有所有必要文件和设置。这等同于使用 django-admin startproject mysite。</p>
<p>你也可以在 PyCharm 内直接运行 manage.py 命令。目前支持的 Django 模板，包括以下一些：</p>
<ul>
<li>语法和错误高亮显示</li>
<li>代码补全</li>
<li>导航</li>
<li>block 名称补全</li>
<li>自定义标签和过滤器补全</li>
<li>标签和过滤器的快速文档</li>
<li>模板 debug 能力<br>
除此之外，我们还可以在其他 Django 部分（如视图、URL 和模型）中执行代码补全、对 Django ORM 提供代码追踪支持（code insight support）、对 Django 模型提供模型依赖项关系图。</li>
</ul>
<p>更多细节，参见官方文档：https://www.jetbrains.com/help/pycharm/django-support7.html。</p>
<h2 id="数据库支持">数据库支持</h2>
<p>现代数据库开发是一个复杂的任务，需要多个支持系统和工作流。这也是 JetBrains 开发独立 IDE DataGrip 的原因。DataGrip 是独立于 PyCharm 的产品，二者的应用场景和授权都不相同。</p>
<p>但幸运的是，通过 Database tools and SQL 插件（该插件默认开启），PyCharm 可以支持 DataGrip 中的所有特性。在该插件的帮助下，你可以查询、创建和管理数据库，不管数据库在本地、服务器，还是在云端。该插件支持 MySQL、PostgreSQL、Microsoft SQL Server、SQLite、MariaDB、Oracle、Apache Cassandra 等。</p>
<p>关于该插件的更多用途，请查看<a href="https://www.jetbrains.com/help/pycharm/relational-databases.html">文档</a>。</p>
<h2 id="线程并发可视化thread-concurrency-visualization">线程并发可视化（Thread Concurrency Visualization）</h2>
<p>Django Channels、asyncio 和近期框架（如 <a href="https://www.starlette.io/">Starlette</a>）表明异步 Python 编程正逐渐成为趋势。异步编程具备很多好处，但很难写，也很难 debug。在此类案例中，Thread Concurrency Visualization 就是医生，帮助你全面管理多线程应用并进行优化。</p>
<p>更多细节，参见<a href="https://www.jetbrains.com/help/pycharm/thread-concurrency-visualization.html">文档</a>。</p>
<h2 id="profiler">Profiler</h2>
<p>说到优化，profiling 是另一种代码优化方法。profiling 可以帮助你查看代码的哪一部分占用了最多的执行时间。profiler 运行的优先级如下：</p>
<ol>
<li>
<p>vmprof</p>
</li>
<li>
<p>yappi</p>
</li>
<li>
<p>cProfile</p>
</li>
</ol>
<p>如果你没有安装 vmprof 或 yappi，则运行标准 cProfile。更多细节，参见<a href="https://www.jetbrains.com/help/pycharm/profiler.html">文档</a>。</p>
<h2 id="科学模式">科学模式</h2>
<p>Python 不仅是通用和 web 编程语言，由于 NumPy、SciPy、scikit-learn、Matplotlib、Jupyter 等库和工具的加持，Python 成为数据科学和机器学习领域的最优工具。有了这些强大工具，你还需要一个强大的 IDE 来支持这些库所具备的绘图、分析等所有功能。</p>
<p>关于科学模式的更多详情，参见<a href="https://www.jetbrains.com/help/pycharm/matplotlib-support.html">文档</a>。</p>
<p>##远程开发</p>
<p>很多应用出现 bug 的一个常见原因是，开发环境和生产环境不同。尽管在大多数情况下，开发时完美复制生产环境并不现实，但力求实现完美复刻是值得追寻的目标。</p>
<p>在 PyCharm 的帮助下，你可以使用另一台计算机（如 Linux VM）上的解释器对应用进行 debug。这样，你就可以拥有与生产环境一样的解释器了，从而避免很多因开发环境和生产环境差异导致的 bug。</p>
<p>详情参见<a href="https://www.jetbrains.com/help/pycharm/remote-debugging-with-product.html">文档</a>。</p>
<h1 id="结论">结论</h1>
<p>PyCharm 是最好的 Python 开发 IDE 之一。它提供大量优势，帮助执行例行任务，从而节约大量时间。</p>
]]></content>
    </entry>
</feed>